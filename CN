#include <stdio.h>
#include <limits.h>
#define MAX 100
int minDistance(int dist[], int sptSet[], int V) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (sptSet[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}
void dijkstra(int graph[MAX][MAX], int V, int src) {
    int dist[V]; 
    int sptSet[V];
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }
    dist[src] = 0;
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet, V);
        sptSet[u] = 1;
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d \t\t %d\n", i, dist[i]);
    }
}
int main() {
    int V, src;
    int graph[MAX][MAX];
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the source vertex: ");
    scanf("%d", &src);

    dijkstra(graph, V, src);
    return 0;
}
____________________________________________________________________________________
#include<stdio.h> 
struct node {
unsigned dist[20]; unsigned from[20];
} 
rt[10];
int main() {
int costmat[20][20]; 
int nodes,i,j,k,count=0;
printf("\nEnter the number of nodes : "); 
scanf("%d",&nodes);//Enter the nodes 
printf("\nEnter the cost matrix :\n"); 
for(i=1;i<=nodes;i++)
{
for(j=1;j<=nodes;j++) { 
scanf("%d",&costmat[i][j]); 
costmat[i][i]=0; 
rt[i].dist[j]=costmat[i][j]; 
rt[i].from[j]=j;
} }
do{ 
count=0;
for(i=1;i<=nodes;i++) 
for(j=1;j<=nodes;j++) 
for(k=1;k<=nodes;k++) 
if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j]){
rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j]; 
rt[i].from[j]=k;
count++; }
}
while(count!=0); 
for(i=1;i<=nodes;i++){
printf("\n\n For router %d\n",i); 
for(j=1;j<=nodes;j++) {
printf("\t\nnode %d via %d Distance %d ",j,rt[i].from[j],rt[i].dist[j]);
} }
printf("\n\n");
}